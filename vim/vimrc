" Both required for Vundle 
set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'yuezk/vim-js'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'styled-components/vim-styled-components'
Plugin 'arcticicestudio/nord-vim'
Plugin 'itchyny/lightline.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }
Plugin 'preservim/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-python/python-syntax'
Plugin 'joshdick/onedark.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'mattn/emmet-vim'
Plugin 'turbio/bracey.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'adelarsq/vim-matchit'
Plugin 'junegunn/fzf', { 'dir': '~/opt/fzf' }
Plugin 'junegunn/fzf.vim'

if has('nvim') || has('patch-8.0.902')
  Plugin 'mhinz/vim-signify'
else
  Plugin 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

" All Plugins must be above this line
call vundle#end()
filetype plugin indent on

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Enable syntax highlighting
syntax enable

" Enable colorful mode for JSX syntax highlighting
let g:vim_jsx_pretty_colorful_config = 1

let g:onedark_terminal_italics = 1

" Set color scheme
colorscheme onedark

" Set lightline colorscheme
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ }

" Use new regular expression engine so that syntax highlighting in TS works
set re=0

" Hide default status line
set noshowmode

" Search down into subfolders
" Provide tab-completion for all file-related tasks
set path+=**

" Ignore node_modules for finding
set wildignore+=**/node_modules/** 

" Enable nice menu for tab completion file names
set wildmenu

" Make <CR> to accept selected completion item or notify coc.nvim to format
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Let vim-python/python-syntax do its thing
let g:python_highlight_all = 1

" Move up and down by visible lines if current line is wrapped
" nmap j gj
" nmap k gk

" Configure indentation
set tabstop=2
set shiftwidth=2
set expandtab

" Keep at least 6 lines below cursor
set scrolloff=6

" Set relative line numbering with absolute number for current line
set number relativenumber

" Rapid editing of Vimrc
if has('nvim')
  nmap <leader>vr :sp ~/.vimrc<cr>
else
  nmap <leader>vr :sp $MYVIMRC<cr>
endif

nmap <leader>so :source $MYVIMRC<cr>

" Prettier formatting
nmap <leader>rf :Prettier<cr>

" NERDTree leader key
nmap <leader>n :NERDTree<cr>

" CoC configuration
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-react-refactor',
      \ 'coc-prettier',
      \ 'coc-eslint',
      \ 'coc-tsserver',
      \ 'coc-styled-components',
      \ 'coc-phpls',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-python'
      \ ]

" CoC actions
nmap <leader>a <Plug>(coc-codeaction)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>cr <Plug>(coc-references)
nmap <leader>cd :call CocAction('jumpDefinition', 'drop')<cr>
" Jump between ESLint warnings
nmap ]w <Plug>(coc-diagnostic-next)
nmap [w <Plug>(coc-diagnostic-prev)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Kinesis bindings
" Press i to enter insert mode, and jk or kj to exit.
:imap jk <Esc>
:imap kj <Esc>

" Move horizontal movement keys to l and ;
" noremap l h
" noremap ; l

" Prettier command
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

" Configure comment character for SQL
autocmd FileType sql setlocal commentstring=-- %s

" Enable emmet for only HTML and CSS
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Redefine emmet trigger key
let g:user_emmet_leader_key=','
