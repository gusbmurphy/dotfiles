" Both required for Vundle 
set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'yuezk/vim-js'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'styled-components/vim-styled-components'
Plugin 'arcticicestudio/nord-vim'
Plugin 'itchyny/lightline.vim'
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }
Plugin 'preservim/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-python/python-syntax'
" Plugin 'glepnir/oceanic-material'
Plugin 'dracula/vim', { 'as': 'dracula' }
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'

if has('nvim') || has('patch-8.0.902')
  Plugin 'mhinz/vim-signify'
else
  Plugin 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

" All Plugins must be above this line
call vundle#end()
filetype plugin indent on

" Enable colorful mode for JSX syntax highlighting
let g:vim_jsx_pretty_colorful_config = 1

" Set color scheme(s)
" set background=dark
" colorscheme oceanic_material
colorscheme dracula

" Use new regular expression engine so that syntax highlighting in TS works
set re=0

" Hide default status line
set noshowmode

" Search down into subfolders
" Provide tab-completion for all file-related tasks
set path+=**

" Ignore node_modules for finding
set wildignore+=**/node_modules/** 

" Enable nice menu for tab completion file names
set wildmenu

" Let vim-python/python-syntax do its thing
let g:python_highlight_all = 1

" To get Dracula colors in iTerm2
set termguicolors
let g:dracula_colorterm = 0

" Move up and down by visible lines if current line is wrapped
" nmap j gj
" nmap k gk

" Configure indentation
set tabstop=2
set shiftwidth=2
set expandtab

" Enable syntax highlighting
syntax enable

" Keep at least 4 lines below cursor
set scrolloff=4

" Set relative line numbering with absolute number for current line
set number relativenumber

" Rapid editing of Vimrc
if has('nvim')
  nmap <leader>vr :sp ~/.vimrc<cr>
else
  nmap <leader>vr :sp $MYVIMRC<cr>
endif

nmap <leader>so :source $MYVIMRC<cr>

" CoC configuration
let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-react-refactor',
      \ 'coc-prettier',
      \ 'coc-eslint',
      \ 'coc-tsserver',
      \ 'coc-styled-components',
      \ 'coc-python'
      \ ]

" CoC actions
nmap <leader>a <Plug>(coc-codeaction)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>cr <Plug>(coc-references)
nmap <leader>cd :call CocAction('jumpDefinition', 'drop')<cr>
" Jump between ESLint warnings
nmap ]w <Plug>(coc-diagnostic-next)
nmap [w <Plug>(coc-diagnostic-prev)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Prettier command
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
